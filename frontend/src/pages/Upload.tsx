import React, { useState } from "react";
import { motion } from "framer-motion";
import { useNavigate } from "react-router-dom";

export default function Upload() {
  const [fileName, setFileName] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  async function handleUpload(event: React.ChangeEvent<HTMLInputElement>) {
    if (!event.target.files?.length) return;

    const file = event.target.files[0];
    setFileName(file.name);
    setError(null); // reset error

    const formData = new FormData();
    formData.append("file", file);

    try {
      setLoading(true);

      const response = await fetch("http://localhost:8000/upload", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        setError("Unsupported or invalid file type");
        return;
      }

      const data = await response.json();
      console.log("Response data:", data);

      // ✅ Redirect if successful
      if (data && !data.error && data.status !== "Unsupported or invalid file type") {
        navigate("/dashboard", { state: { file: data } });
      } else {
        setError("Unsupported or invalid file type");
      }
    } catch (err) {
      console.error("Upload failed:", err);
      setError("Unsupported or invalid file type");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="relative min-h-screen flex flex-col items-center justify-center text-white px-4 overflow-hidden">
      {/* === Background === */}
      <video autoPlay loop muted playsInline className="absolute inset-0 w-full h-full object-cover -z-20">
        <source src="/background.mp4" type="video/mp4" />
      </video>
      <div className="absolute inset-0 bg-black/60 -z-10"></div>

      {/* === Title === */}
      <motion.h1 className="text-6xl font-extrabold bg-gradient-to-r from-purple-400 to-indigo-400 bg-clip-text text-transparent mb-3 drop-shadow-lg" initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        TrueView
      </motion.h1>

      <motion.p className="text-gray-300 mb-6 text-center text-lg tracking-wide" initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2, duration: 0.6 }}>
        Upload any media to see if it's a deepfake or was generated by AI.
      </motion.p>

      {/* === Error Message === */}
      {error && (
        <motion.p className="text-red-400 font-semibold text-lg mb-3" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }}>
          {error}
        </motion.p>
      )}

      {/* === Upload Box === */}
      <motion.div className="backdrop-blur-xl bg-white/10 border border-white/20 rounded-2xl shadow-xl p-10 w-full max-w-lg text-center" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <label className="flex flex-col items-center justify-center border-2 border-dashed border-gray-400 rounded-xl py-10 cursor-pointer hover:border-purple-400 transition">
          <input type="file" onChange={handleUpload} className="hidden" id="fileInput" />
          <p className="text-gray-300 mb-4 text-xl font-medium">{fileName || "Drag & drop a file or click to upload"}</p>
          <label
            htmlFor="fileInput"
            className="mt-2 bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600
                       text-white px-6 py-3 rounded-lg font-semibold shadow-lg hover:shadow-purple-500/50 transition"
          >
            {loading ? "Analyzing..." : "Upload File"}
          </label>
        </label>
      </motion.div>

      <p className="mt-4 text-gray-400 text-sm">Supported Files: png, jpg, jpeg, webp, mp4, mov, mkv</p>

      <p className="mt-20 text-gray-400 text-sm">© 2025 TrueView — Built For Hack Harvard 2025</p>
    </div>
  );
}
